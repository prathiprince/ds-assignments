{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO8tEzLtuvwlje1mMMUHcDo",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/prathiprince/ds-assignments/blob/main/phonepe_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GKa0FoA2Ffjd"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import json\n",
        "import pandas as pd\n",
        "import mysql.connector\n",
        "import requests\n",
        "import plotly.express as px\n",
        "import streamlit as st\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "#aggregated transaction\n",
        "path1 = \"C:/Users/prath/OneDrive/Desktop/Documents/youtube project/phonepe/pulse/data/aggregated/transaction/country/india/state/\"\n",
        "aggregated_list = os.listdir(path1)\n",
        "\n",
        "column={'states':[], 'year':[], 'quarter':[], 'transaction_type':[], 'transaction_count':[], 'transaction_amount':[]}\n",
        "\n",
        "for state in aggregated_list:\n",
        "    cursor_state_path = path1+state+\"/\"\n",
        "    aggregatedyear_list = os.listdir(cursor_state_path)\n",
        "\n",
        "    for year in aggregatedyear_list:\n",
        "        cursor_year_path = cursor_state_path+year+\"/\"\n",
        "        aggregated_file_list = os.listdir(cursor_year_path)\n",
        "\n",
        "        for file in aggregated_file_list:\n",
        "            cursor_file = cursor_year_path+file\n",
        "            data = open(cursor_file,'r')\n",
        "\n",
        "            A=json.load(data)\n",
        "\n",
        "            for i in A['data']['transactionData']:\n",
        "                name = i['name']\n",
        "                count = i['paymentInstruments'][0]['count']\n",
        "                amount = i['paymentInstruments'][0]['amount']\n",
        "                column['transaction_type'].append(name)\n",
        "                column['transaction_count'].append(count)\n",
        "                column['transaction_amount'].append(amount)\n",
        "                column['states'].append(state)\n",
        "                column['year'].append(year)\n",
        "                column['quarter'].append(int(file.strip('.json')))\n",
        "\n",
        "aggregated_df = pd.DataFrame(column)\n",
        "aggregated_df[\"states\"] = aggregated_df[\"states\"].str.replace(\"andaman-&-nicobar-islands\",\"Andaman & Nicobar\")\n",
        "aggregated_df[\"states\"] = aggregated_df[\"states\"].str.replace(\"-\",\" \")\n",
        "aggregated_df[\"states\"] = aggregated_df[\"states\"].str.title()\n",
        "aggregated_df['states'] = aggregated_df['states'].str.replace(\"Dadra & Nagar Haveli & Daman & Diu\", \"Dadra and Nagar Haveli and Daman and Diu\")\n",
        "\n",
        "#aggregated user\n",
        "\n",
        "path2 = \"C:/Users/prath/OneDrive/Desktop/Documents/youtube project/phonepe/pulse/data/aggregated/user/country/india/state/\"\n",
        "aggregated_userlist = os.listdir(path2)\n",
        "\n",
        "column1={'states':[], 'year':[], 'quarter':[], 'Brands':[], 'count_no':[], 'percentage':[]}\n",
        "\n",
        "for state in aggregated_userlist:\n",
        "    cursor_ustate_path = path2+state+\"/\"\n",
        "    aggregatedyear_ulist = os.listdir(cursor_ustate_path)\n",
        "\n",
        "    for year in aggregatedyear_ulist:\n",
        "        cursor_year_path = cursor_ustate_path+year+\"/\"\n",
        "        aggregated_file_list = os.listdir(cursor_year_path)\n",
        "\n",
        "        for file in aggregated_file_list:\n",
        "            cursor_file = cursor_year_path+file\n",
        "            data = open(cursor_file,'r')\n",
        "\n",
        "            B=json.load(data)\n",
        "\n",
        "            try:\n",
        "                for i in B['data']['usersByDevice']:\n",
        "                    brand = i['brand']\n",
        "                    count = i['count']\n",
        "                    percentage = i['percentage']\n",
        "                    column1['Brands'].append(brand)\n",
        "                    column1['count_no'].append(count)\n",
        "                    column1['percentage'].append(percentage)\n",
        "                    column1['states'].append(state)\n",
        "                    column1['year'].append(year)\n",
        "                    column1['quarter'].append(int(file.strip('.json')))\n",
        "\n",
        "            except:\n",
        "                pass\n",
        "\n",
        "aggregated_udf = pd.DataFrame(column1)\n",
        "aggregated_udf[\"states\"] = aggregated_udf[\"states\"].str.replace(\"andaman-&-nicobar-islands\",\"Andaman & Nicobar\")\n",
        "aggregated_udf[\"states\"] = aggregated_udf[\"states\"].str.replace(\"-\",\" \")\n",
        "aggregated_udf[\"states\"] = aggregated_udf[\"states\"].str.title()\n",
        "aggregated_udf['states'] = aggregated_udf['states'].str.replace(\"Dadra & Nagar Haveli & Daman & Diu\", \"Dadra and Nagar Haveli and Daman and Diu\")\n",
        "\n",
        "\n",
        "# map Transaction\n",
        "path3 = \"C:/Users/prath/OneDrive/Desktop/Documents/youtube project/phonepe/pulse/data/map/transaction/hover/country/india/state/\"\n",
        "map_list = os.listdir(path3)\n",
        "\n",
        "column2={'states':[], 'year':[], 'quarter':[], 'transaction_district':[], 'transaction_count':[], 'transaction_amount':[]}\n",
        "\n",
        "for state in map_list:\n",
        "    cursor_state_path = path3+state+\"/\"\n",
        "    aggregatedyear_list = os.listdir(cursor_state_path)\n",
        "\n",
        "    for year in aggregatedyear_list:\n",
        "        cursor_year_path = cursor_state_path+year+\"/\"\n",
        "        aggregated_file_list = os.listdir(cursor_year_path)\n",
        "\n",
        "        for file in aggregated_file_list:\n",
        "            cursor_file = cursor_year_path+file\n",
        "            data = open(cursor_file,'r')\n",
        "\n",
        "            C=json.load(data)\n",
        "\n",
        "            for i in C['data']['hoverDataList']:\n",
        "                name = i['name']\n",
        "                count = i['metric'][0]['count']\n",
        "                amount = i['metric'][0]['amount']\n",
        "                column2['transaction_district'].append(name)\n",
        "                column2['transaction_count'].append(count)\n",
        "                column2['transaction_amount'].append(amount)\n",
        "                column2['states'].append(state)\n",
        "                column2['year'].append(year)\n",
        "                column2['quarter'].append(int(file.strip('.json')))\n",
        "\n",
        "maptransact_list = pd.DataFrame(column2)\n",
        "maptransact_list[\"states\"] = maptransact_list[\"states\"].str.replace(\"andaman-&-nicobar-islands\",\"Andaman & Nicobar\")\n",
        "maptransact_list[\"states\"] = maptransact_list[\"states\"].str.replace(\"-\",\" \")\n",
        "maptransact_list[\"states\"] = maptransact_list[\"states\"].str.title()\n",
        "maptransact_list['states'] = maptransact_list['states'].str.replace(\"Dadra & Nagar Haveli & Daman & Diu\", \"Dadra and Nagar Haveli and Daman and Diu\")\n",
        "\n",
        "\n",
        "# map user\n",
        "\n",
        "path4 = \"C:/Users/prath/OneDrive/Desktop/Documents/youtube project/phonepe/pulse/data/map/user/hover/country/india/state/\"\n",
        "mapuser_list = os.listdir(path4)\n",
        "\n",
        "column3={'states':[], 'year':[], 'quarter':[], 'Districts':[], 'registered_user':[], 'appopens':[]}\n",
        "\n",
        "for state in mapuser_list:\n",
        "    cursor_ustate_path = path4+state+\"/\"\n",
        "    aggregatedyear_ulist = os.listdir(cursor_ustate_path)\n",
        "\n",
        "    for year in aggregatedyear_ulist:\n",
        "        cursor_year_path = cursor_ustate_path+year+\"/\"\n",
        "        aggregated_file_list = os.listdir(cursor_year_path)\n",
        "\n",
        "        for file in aggregated_file_list:\n",
        "            cursor_file = cursor_year_path+file\n",
        "            data = open(cursor_file,'r')\n",
        "\n",
        "            D=json.load(data)\n",
        "\n",
        "            for i in D['data']['hoverData'].items():\n",
        "                    district = i[0]\n",
        "                    registeredusers = i[1]['registeredUsers']\n",
        "                    appopens = i[1]['appOpens']\n",
        "                    column3['Districts'].append(district)\n",
        "                    column3['registered_user'].append(registeredusers)\n",
        "                    column3['appopens'].append(appopens)\n",
        "                    column3['states'].append(state)\n",
        "                    column3['year'].append(year)\n",
        "                    column3['quarter'].append(int(file.strip('.json')))\n",
        "\n",
        "mapuser_dflist = pd.DataFrame(column3)\n",
        "mapuser_dflist[\"states\"] = mapuser_dflist[\"states\"].str.replace(\"andaman-&-nicobar-islands\",\"Andaman & Nicobar\")\n",
        "mapuser_dflist[\"states\"] = mapuser_dflist[\"states\"].str.replace(\"-\",\" \")\n",
        "mapuser_dflist[\"states\"] = mapuser_dflist[\"states\"].str.title()\n",
        "mapuser_dflist['states'] = mapuser_dflist['states'].str.replace(\"Dadra & Nagar Haveli & Daman & Diu\", \"Dadra and Nagar Haveli and Daman and Diu\")\n",
        "\n",
        "# top transaction\n",
        "path5 = \"C:/Users/prath/OneDrive/Desktop/Documents/youtube project/phonepe/pulse/data/top/transaction/country/india/state/\"\n",
        "toptransact_list = os.listdir(path5)\n",
        "\n",
        "column4={'states':[], 'year':[], 'quarter':[], 'transaction_district':[], 'transaction_count':[], 'transaction_amount':[]}\n",
        "\n",
        "for state in toptransact_list:\n",
        "    cursor_state_path = path5+state+\"/\"\n",
        "    aggregatedyear_list = os.listdir(cursor_state_path)\n",
        "\n",
        "    for year in aggregatedyear_list:\n",
        "        cursor_year_path = cursor_state_path+year+\"/\"\n",
        "        aggregated_file_list = os.listdir(cursor_year_path)\n",
        "\n",
        "        for file in aggregated_file_list:\n",
        "            cursor_file = cursor_year_path+file\n",
        "            data = open(cursor_file,'r')\n",
        "\n",
        "            E=json.load(data)\n",
        "\n",
        "            for i in E['data']['districts']:\n",
        "                name = i['entityName']\n",
        "                count = i['metric']['count']\n",
        "                amount = i['metric']['amount']\n",
        "                column4['transaction_district'].append(name)\n",
        "                column4['transaction_count'].append(count)\n",
        "                column4['transaction_amount'].append(amount)\n",
        "                column4['states'].append(state)\n",
        "                column4['year'].append(year)\n",
        "                column4['quarter'].append(int(file.strip('.json')))\n",
        "\n",
        "toptransaction_list = pd.DataFrame(column4)\n",
        "toptransaction_list[\"states\"] = toptransaction_list[\"states\"].str.replace(\"andaman-&-nicobar-islands\",\"Andaman & Nicobar\")\n",
        "toptransaction_list[\"states\"] = toptransaction_list[\"states\"].str.replace(\"-\",\" \")\n",
        "toptransaction_list[\"states\"] = toptransaction_list[\"states\"].str.title()\n",
        "toptransaction_list['states'] = toptransaction_list['states'].str.replace(\"Dadra & Nagar Haveli & Daman & Diu\", \"Dadra and Nagar Haveli and Daman and Diu\")\n",
        "\n",
        "# top user list\n",
        "\n",
        "path6 = \"C:/Users/prath/OneDrive/Desktop/Documents/youtube project/phonepe/pulse/data/top/user/country/india/state/\"\n",
        "topuser_list = os.listdir(path6)\n",
        "\n",
        "column5={'states':[], 'year':[], 'quarter':[], 'Districts':[], 'registered_user':[]}\n",
        "\n",
        "for state in topuser_list:\n",
        "    cursor_ustate_path = path6+state+\"/\"\n",
        "    aggregatedyear_ulist = os.listdir(cursor_ustate_path)\n",
        "\n",
        "    for year in aggregatedyear_ulist:\n",
        "        cursor_year_path = cursor_ustate_path+year+\"/\"\n",
        "        aggregated_file_list = os.listdir(cursor_year_path)\n",
        "\n",
        "        for file in aggregated_file_list:\n",
        "            cursor_file = cursor_year_path+file\n",
        "            data = open(cursor_file,'r')\n",
        "\n",
        "            F=json.load(data)\n",
        "\n",
        "            for i in F['data']['districts']:\n",
        "                district = i['name']\n",
        "                registeredusers = i['registeredUsers']\n",
        "                column5['Districts'].append(district)\n",
        "                column5['registered_user'].append(registeredusers)\n",
        "                column5['states'].append(state)\n",
        "                column5['year'].append(year)\n",
        "                column5['quarter'].append(int(file.strip('.json')))\n",
        "\n",
        "topuser_listdf = pd.DataFrame(column5)\n",
        "topuser_listdf[\"states\"] = topuser_listdf[\"states\"].str.replace(\"andaman-&-nicobar-islands\",\"Andaman & Nicobar\")\n",
        "topuser_listdf[\"states\"] = topuser_listdf[\"states\"].str.replace(\"-\",\" \")\n",
        "topuser_listdf[\"states\"] = topuser_listdf[\"states\"].str.title()\n",
        "topuser_listdf['states'] = topuser_listdf['states'].str.replace(\"Dadra & Nagar Haveli & Daman & Diu\", \"Dadra and Nagar Haveli and Daman and Diu\")\n",
        "\n",
        "\n",
        "# SQL table creation for aggregated_transaction\n",
        "mydb = mysql.connector.connect(host='localhost',user='root',password='123456',database='phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "create_query = '''CREATE TABLE if not exists aggregated_transaction (States varchar(50),\n",
        "                                                                      Years int,\n",
        "                                                                      Quarter int,\n",
        "                                                                      Transaction_type varchar(50),\n",
        "                                                                      Transaction_count bigint,\n",
        "                                                                      Transaction_amount bigint\n",
        "                                                                      )'''\n",
        "mycursor.execute(create_query)\n",
        "mydb.commit()\n",
        "\n",
        "for index,row in aggregated_df.iterrows():\n",
        "    insert_query = '''INSERT INTO aggregated_transaction (States, Years, Quarter, Transaction_type, Transaction_count, Transaction_amount)\n",
        "                                                        values(%s,%s,%s,%s,%s,%s)'''\n",
        "    values = (row[\"states\"],\n",
        "              row[\"year\"],\n",
        "              row[\"quarter\"],\n",
        "              row[\"transaction_type\"],\n",
        "              row[\"transaction_count\"],\n",
        "              row[\"transaction_amount\"]\n",
        "              )\n",
        "    mycursor.execute(insert_query,values)\n",
        "    mydb.commit()\n",
        "\n",
        "# SQL table creation for aggregated_user\n",
        "mydb = mysql.connector.connect(host='localhost',user='root',password='123456',database='phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "create_query1 = '''CREATE TABLE if not exists aggregated_user(States varchar(50),\n",
        "                                                                Year int,\n",
        "                                                                Quarter int,\n",
        "                                                                Brands varchar(50),\n",
        "                                                                Count_no bigint,\n",
        "                                                                Percentage float\n",
        "                                                                )'''\n",
        "mycursor.execute(create_query1)\n",
        "mydb.commit()\n",
        "\n",
        "for index,row in aggregated_udf.iterrows():\n",
        "    insert_query1 = '''INSERT INTO aggregated_user(States, Year, Quarter, Brands, Count_no, Percentage)\n",
        "                                                    values(%s,%s,%s,%s,%s,%s)'''\n",
        "\n",
        "    values = (row[\"states\"],\n",
        "             row[\"year\"],\n",
        "             row[\"quarter\"],\n",
        "             row[\"Brands\"],\n",
        "             row[\"count_no\"],\n",
        "             row[\"percentage\"]\n",
        "            )\n",
        "\n",
        "    mycursor.execute(insert_query1,values)\n",
        "    mydb.commit()\n",
        "\n",
        "# SQL table creation for map transaction\n",
        "mydb = mysql.connector.connect(host = 'localhost', user ='root', password = '123456', database = 'phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "create_query2 = '''CREATE TABLE if not exists map_transaction(States varchar(50),\n",
        "                                                                Year int,\n",
        "                                                                Quarter int,\n",
        "                                                                Transaction_district varchar(50),\n",
        "                                                                Transaction_count bigint,\n",
        "                                                                Transaction_amount bigint\n",
        "                                                                )'''\n",
        "mycursor.execute(create_query2)\n",
        "mydb.commit()\n",
        "\n",
        "for index,row in maptransact_list.iterrows():\n",
        "    insert_query2 = '''INSERT INTO map_transaction(States, Year, Quarter, Transaction_district, Transaction_count, Transaction_amount)\n",
        "                                                    values(%s,%s,%s,%s,%s,%s)'''\n",
        "\n",
        "    values =(row['states'],\n",
        "             row['year'],\n",
        "             row['quarter'],\n",
        "             row['transaction_district'],\n",
        "             row['transaction_count'],\n",
        "             row['transaction_amount']\n",
        "            )\n",
        "\n",
        "    mycursor.execute(insert_query2,values)\n",
        "    mydb.commit()\n",
        "\n",
        "# SQL table creation for map user\n",
        "mydb = mysql.connector.connect(host = 'localhost', user ='root', password = '123456', database = 'phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "create_query3 = '''CREATE TABLE if not exists map_user(States varchar(50),\n",
        "                                                                Year int,\n",
        "                                                                Quarter int,\n",
        "                                                                Districts varchar(50),\n",
        "                                                                Registered_user bigint,\n",
        "                                                                Appopens bigint\n",
        "                                                                )'''\n",
        "mycursor.execute(create_query3)\n",
        "mydb.commit()\n",
        "\n",
        "for index,row in mapuser_dflist.iterrows():\n",
        "    insert_query3 = '''INSERT INTO map_user(States, Year, Quarter, Districts, Registered_user, Appopens)\n",
        "                                                    values(%s,%s,%s,%s,%s,%s)'''\n",
        "\n",
        "    values =(row['states'],\n",
        "             row['year'],\n",
        "             row['quarter'],\n",
        "             row['Districts'],\n",
        "             row['registered_user'],\n",
        "             row['appopens']\n",
        "            )\n",
        "\n",
        "    mycursor.execute(insert_query3,values)\n",
        "    mydb.commit()\n",
        "\n",
        "# SQL table creation for top transaction\n",
        "mydb = mysql.connector.connect(host = 'localhost', user ='root', password = '123456', database = 'phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "create_query4 = '''CREATE TABLE if not exists top_transaction(States varchar(50),\n",
        "                                                                Year int,\n",
        "                                                                Quarter int,\n",
        "                                                                Transaction_district varchar(50),\n",
        "                                                                Transaction_count bigint,\n",
        "                                                                Transaction_amount bigint\n",
        "                                                                )'''\n",
        "mycursor.execute(create_query4)\n",
        "mydb.commit()\n",
        "\n",
        "for index,row in toptransaction_list.iterrows():\n",
        "    insert_query4 = '''INSERT INTO top_transaction(States, Year, Quarter, transaction_district, transaction_count, transaction_amount)\n",
        "                                                    values(%s,%s,%s,%s,%s,%s)'''\n",
        "\n",
        "    values =(row['states'],\n",
        "             row['year'],\n",
        "             row['quarter'],\n",
        "             row['transaction_district'],\n",
        "             row['transaction_count'],\n",
        "             row['transaction_amount']\n",
        "            )\n",
        "\n",
        "    mycursor.execute(insert_query4,values)\n",
        "    mydb.commit()\n",
        "\n",
        "# SQL table creation for top user\n",
        "mydb = mysql.connector.connect(host = 'localhost', user ='root', password = '123456', database = 'phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "create_query5 = '''CREATE TABLE if not exists top_user(States varchar(50),\n",
        "                                                                Year int,\n",
        "                                                                Quarter int,\n",
        "                                                                Districts varchar(50),\n",
        "                                                                Registered_user bigint\n",
        "                                                                )'''\n",
        "mycursor.execute(create_query5)\n",
        "mydb.commit()\n",
        "\n",
        "for index,row in topuser_listdf.iterrows():\n",
        "    insert_query5 = '''INSERT INTO top_user(States, Year, Quarter, Districts, Registered_user)\n",
        "                                                    values(%s,%s,%s,%s,%s)'''\n",
        "\n",
        "    values =(row['states'],\n",
        "             row['year'],\n",
        "             row['quarter'],\n",
        "             row['Districts'],\n",
        "             row['registered_user']\n",
        "            )\n",
        "\n",
        "    mycursor.execute(insert_query5,values)\n",
        "    mydb.commit()\n",
        "\n",
        "# create dataframes from sql\n",
        "\n",
        "mydb = mysql.connector.connect(host = 'localhost', user ='root', password = '123456', database = 'phonepeproject2')\n",
        "mycursor = mydb.cursor()\n",
        "\n",
        "# aggregated transaction\n",
        "mycursor.execute(\"select * from aggregated_transaction;\")\n",
        "table1 = mycursor.fetchall()\n",
        "Aggre_trans = pd.DataFrame(table1,columns = ('States', 'Years', 'Quarter', 'Transaction_type', 'Transaction_count', 'Transaction_amount'))\n",
        "\n",
        "#Aggregated_user\n",
        "mycursor.execute(\"select * from aggregated_user\")\n",
        "table2 = mycursor.fetchall()\n",
        "Aggre_user = pd.DataFrame(table2,columns = (\"States\", \"Years\", \"Quarter\", \"Brands\", \"Count_no\", \"Percentage\"))\n",
        "\n",
        "#Map_transaction\n",
        "mycursor.execute(\"select * from map_transaction\")\n",
        "table3 = mycursor.fetchall()\n",
        "Map_trans = pd.DataFrame(table3,columns = (\"States\", \"Year\", \"Quarter\", \"Transaction_district\", \"Transaction_count\", \"Transaction_amount\"))\n",
        "\n",
        "#Map_user\n",
        "mycursor.execute(\"select * from map_user\")\n",
        "table4 = mycursor.fetchall()\n",
        "Map_user = pd.DataFrame(table4,columns = (\"States\", \"Year\", \"Quarter\", \"Districts\", \"Registered_user\", \"Appopens\"))\n",
        "\n",
        "\n",
        "#Top_transaction\n",
        "mycursor.execute(\"select * from top_transaction\")\n",
        "table5 = mycursor.fetchall()\n",
        "Top_trans = pd.DataFrame(table5,columns = (\"States\", \"Year\", \"Quarter\", \"Transaction_district\", \"Transaction_count\", \"Transaction_amount\"))\n",
        "\n",
        "#Top_user\n",
        "mycursor.execute(\"select * from top_user\")\n",
        "table6 = mycursor.fetchall()\n",
        "Top_user = pd.DataFrame(table6, columns = (\"States\", \"Year\", \"Quarter\", \"Districts\", \"Registered_user\"))\n",
        "\n",
        "def animate_all_amount():\n",
        "    url = \"https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson\"\n",
        "    response =requests.get(url)\n",
        "    data1 = json.loads(response.content)\n",
        "    state_names_tra = [feature[\"properties\"][\"ST_NM\"] for feature in data1[\"features\"]]\n",
        "    state_names_tra.sort()\n",
        "\n",
        "    df_state_names_tra = pd.DataFrame({\"states\":state_names_tra})\n",
        "\n",
        "    frames = []\n",
        "\n",
        "    for year in Map_user[\"Year\"].unique():\n",
        "        for quarter in Aggre_trans[\"Quarter\"].unique():\n",
        "\n",
        "            at1 = Aggre_trans[(Aggre_trans[\"Years\"]==year)&(Aggre_trans[\"Quarter\"]==quarter)]\n",
        "            atf1 = at1[[\"States\",\"Transaction_amount\"]]\n",
        "            atf1 = atf1.sort_values(by=\"States\")\n",
        "            atf1[\"Years\"]=year\n",
        "            atf1[\"Quarter\"]=quarter\n",
        "            frames.append(atf1)\n",
        "\n",
        "    merged_df = pd.concat(frames)\n",
        "\n",
        "    fig_tra = px.choropleth(merged_df, geojson= data1, locations= \"States\", featureidkey= \"properties.ST_NM\", color= \"Transaction_amount\",\n",
        "                                color_continuous_scale= \"Sunsetdark\", range_color= (0,4000000000), hover_name= \"States\", title = \"TRANSACTION AMOUNT\",\n",
        "                                animation_frame=\"Years\", animation_group=\"Quarter\")\n",
        "\n",
        "    fig_tra.update_geos(fitbounds= \"locations\", visible =False)\n",
        "    fig_tra.update_layout(width =600, height= 700)\n",
        "    fig_tra.update_layout(title_font= {\"size\":25})\n",
        "    return st.plotly_chart(fig_tra)\n",
        "\n",
        "def payment_count():\n",
        "    attype= Aggre_trans[[\"Transaction_type\", \"Transaction_count\"]]\n",
        "    att1= attype.groupby(\"Transaction_type\")[\"Transaction_count\"].sum()\n",
        "    df_att1= pd.DataFrame(att1).reset_index()\n",
        "    fig_pc= px.bar(df_att1,x= \"Transaction_type\",y= \"Transaction_count\",title= \"TRANSACTION TYPE and TRANSACTION COUNT\",\n",
        "                color_discrete_sequence=px.colors.sequential.Redor_r)\n",
        "    fig_pc.update_layout(width=600, height= 500)\n",
        "    return st.plotly_chart(fig_pc)\n",
        "\n",
        "def animate_all_count():\n",
        "    url = \"https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson\"\n",
        "    response= requests.get(url)\n",
        "    data1= json.loads(response.content)\n",
        "    state_names_tra= [feature[\"properties\"][\"ST_NM\"]for feature in data1[\"features\"]]\n",
        "    state_names_tra.sort()\n",
        "\n",
        "    df_state_names_tra= pd.DataFrame({\"states\":state_names_tra})\n",
        "\n",
        "\n",
        "    frames= []\n",
        "\n",
        "    for year in Aggre_trans[\"Years\"].unique():\n",
        "        for quarter in Aggre_trans[\"Quarter\"].unique():\n",
        "\n",
        "            at1= Aggre_trans[(Aggre_trans[\"Years\"]==year)&(Aggre_trans[\"Quarter\"]==quarter)]\n",
        "            atf1= at1[[\"States\", \"Transaction_count\"]]\n",
        "            atf1=atf1.sort_values(by=\"States\")\n",
        "            atf1[\"Years\"]=year\n",
        "            atf1[\"Quarter\"]=quarter\n",
        "            frames.append(atf1)\n",
        "\n",
        "    merged_df = pd.concat(frames)\n",
        "\n",
        "    fig_tra= px.choropleth(merged_df, geojson= data1, locations= \"States\",featureidkey= \"properties.ST_NM\",\n",
        "                        color= \"Transaction_count\", color_continuous_scale=\"Sunsetdark\", range_color= (0,3000000),\n",
        "                        title=\"TRANSACTION COUNT\", hover_name= \"States\", animation_frame= \"Years\", animation_group= \"Quarter\")\n",
        "\n",
        "    fig_tra.update_geos(fitbounds= \"locations\", visible= False)\n",
        "    fig_tra.update_layout(width= 600, height= 700)\n",
        "    fig_tra.update_layout(title_font={\"size\":25})\n",
        "    return st.plotly_chart(fig_tra)\n",
        "\n",
        "\n",
        "def payment_amount():\n",
        "    attype= Aggre_trans[[\"Transaction_type\",\"Transaction_amount\"]]\n",
        "    att1= attype.groupby(\"Transaction_type\")[\"Transaction_amount\"].sum()\n",
        "    df_att1= pd.DataFrame(att1).reset_index()\n",
        "    fig_tra_pa= px.bar(df_att1, x= \"Transaction_type\", y= \"Transaction_amount\", title= \"TRANSACTION TYPE and TRANSACTION AMOUNT\",\n",
        "                    color_discrete_sequence= px.colors.sequential.Blues_r)\n",
        "    fig_tra_pa.update_layout(width= 600, height= 500)\n",
        "    return st.plotly_chart(fig_tra_pa)\n",
        "\n",
        "def reg_all_states(state):\n",
        "    mu= Map_user[[\"States\",\"Districts\",\"Registered_user\"]]\n",
        "    mu1= mu.loc[(mu[\"States\"]==state)]\n",
        "    mu2= mu1[[\"Districts\", \"Registered_user\"]]\n",
        "    mu3= mu2.groupby(\"Districts\")[\"Registered_user\"].sum()\n",
        "    mu4= pd.DataFrame(mu3).reset_index()\n",
        "    fig_mu= px.bar(mu4, x= \"Districts\", y= \"Registered_user\", title= \"DISTRICTS and REGISTERED USER\",\n",
        "                color_discrete_sequence=px.colors.sequential.Bluered_r)\n",
        "    fig_mu.update_layout(width= 1000, height= 500)\n",
        "    return st.plotly_chart(fig_mu)\n",
        "\n",
        "def transaction_amount_year(sel_year):\n",
        "    url= \"https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson\"\n",
        "    response= requests.get(url)\n",
        "    data1= json.loads(response.content)\n",
        "    state_names_tra= [feature[\"properties\"]['ST_NM']for feature in data1[\"features\"]]\n",
        "    state_names_tra.sort()\n",
        "\n",
        "    year= int(sel_year)\n",
        "    atay= Aggre_trans[[\"States\",\"Years\",\"Transaction_amount\"]]\n",
        "    atay1= atay.loc[(Aggre_trans[\"Years\"]==year)]\n",
        "    atay2= atay1.groupby(\"States\")[\"Transaction_amount\"].sum()\n",
        "    atay3= pd.DataFrame(atay2).reset_index()\n",
        "\n",
        "    fig_atay= px.choropleth(atay3, geojson= data1, locations= \"States\", featureidkey= \"properties.ST_NM\",\n",
        "                            color= \"Transaction_amount\", color_continuous_scale=\"rainbow\", range_color=(0,800000000000),\n",
        "                            title=\"TRANSACTION AMOUNT and STATES\", hover_name= \"States\")\n",
        "\n",
        "    fig_atay.update_geos(fitbounds= \"locations\", visible= False)\n",
        "    fig_atay.update_layout(width=600,height=700)\n",
        "    fig_atay.update_layout(title_font= {\"size\":25})\n",
        "    return st.plotly_chart(fig_atay)\n",
        "\n",
        "def payment_count_year(sel_year):\n",
        "    year= int(sel_year)\n",
        "    apc= Aggre_trans[[\"Transaction_type\", \"Years\", \"Transaction_count\"]]\n",
        "    apc1= apc.loc[(Aggre_trans[\"Years\"]==year)]\n",
        "    apc2= apc1.groupby(\"Transaction_type\")[\"Transaction_count\"].sum()\n",
        "    apc3= pd.DataFrame(apc2).reset_index()\n",
        "\n",
        "    fig_apc= px.bar(apc3,x= \"Transaction_type\", y= \"Transaction_count\", title= \"PAYMENT COUNT and PAYMENT TYPE\",\n",
        "                    color_discrete_sequence=px.colors.sequential.Brwnyl_r)\n",
        "    fig_apc.update_layout(width=600, height=500)\n",
        "    return st.plotly_chart(fig_apc)\n",
        "\n",
        "def transaction_count_year(sel_year):\n",
        "    url= \"https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson\"\n",
        "    response= requests.get(url)\n",
        "    data1=json.loads(response.content)\n",
        "    state_names_tra= [feature[\"properties\"][\"ST_NM\"]for feature in data1[\"features\"]]\n",
        "    state_names_tra.sort()\n",
        "\n",
        "    year= int(sel_year)\n",
        "    atcy= Aggre_trans[[\"States\", \"Years\", \"Transaction_count\"]]\n",
        "    atcy1= atcy.loc[(Aggre_trans[\"Years\"]==year)]\n",
        "    atcy2= atcy1.groupby(\"States\")[\"Transaction_count\"].sum()\n",
        "    atcy3= pd.DataFrame(atcy2).reset_index()\n",
        "\n",
        "    fig_atcy= px.choropleth(atcy3, geojson=data1, locations= \"States\", featureidkey= \"properties.ST_NM\",\n",
        "                            color= \"Transaction_count\", color_continuous_scale= \"rainbow\",range_color=(0,3000000000),\n",
        "                            title= \"TRANSACTION COUNT and STATES\",hover_name= \"States\")\n",
        "    fig_atcy.update_geos(fitbounds= \"locations\", visible= False)\n",
        "    fig_atcy.update_layout(width=600, height= 700)\n",
        "    fig_atcy.update_layout(title_font={\"size\":25})\n",
        "    return st.plotly_chart(fig_atcy)\n",
        "\n",
        "def payment_amount_year(sel_year):\n",
        "    year= int(sel_year)\n",
        "    apay = Aggre_trans[[\"Years\", \"Transaction_type\", \"Transaction_amount\"]]\n",
        "    apay1= apay.loc[(Aggre_trans[\"Years\"]==year)]\n",
        "    apay2= apay1.groupby(\"Transaction_type\")[\"Transaction_amount\"].sum()\n",
        "    apay3= pd.DataFrame(apay2).reset_index()\n",
        "\n",
        "    fig_apay= px.bar(apay3, x=\"Transaction_type\", y= \"Transaction_amount\", title= \"PAYMENT TYPE and PAYMENT AMOUNT\",\n",
        "                    color_discrete_sequence=px.colors.sequential.Burg_r)\n",
        "    fig_apay.update_layout(width=600, height=500)\n",
        "    return st.plotly_chart(fig_apay)\n",
        "\n",
        "def reg_state_all_RU(sel_year,state):\n",
        "    year= int(sel_year)\n",
        "    mus= Map_user[[\"States\", \"Year\", \"Districts\", \"Registered_user\"]]\n",
        "    mus1= mus.loc[(Map_user[\"States\"]==state)&(Map_user[\"Year\"]==year)]\n",
        "    mus2= mus1.groupby(\"Districts\")[\"Registered_user\"].sum()\n",
        "    mus3= pd.DataFrame(mus2).reset_index()\n",
        "\n",
        "    fig_mus= px.bar(mus3, x= \"Districts\", y=\"Registered_user\", title=\"DISTRICTS and REGISTERED USER\",\n",
        "                    color_discrete_sequence=px.colors.sequential.Cividis_r)\n",
        "    fig_mus.update_layout(width= 600, height= 500)\n",
        "    return st.plotly_chart(fig_mus)\n",
        "\n",
        "def reg_state_all_TA(sel_year,state):\n",
        "    year= int(sel_year)\n",
        "    mts= Map_trans[[\"States\", \"Year\",\"Transaction_district\", \"Transaction_amount\"]]\n",
        "    mts1= mts.loc[(Map_trans[\"States\"]==state)&(Map_trans[\"Year\"]==year)]\n",
        "    mts2= mts1.groupby(\"Transaction_district\")[\"Transaction_amount\"].sum()\n",
        "    mts3= pd.DataFrame(mts2).reset_index()\n",
        "\n",
        "    fig_mts= px.bar(mts3, x= \"Transaction_district\", y= \"Transaction_amount\", title= \"DISTRICT and TRANSACTION AMOUNT\",\n",
        "                    color_discrete_sequence= px.colors.sequential.Darkmint_r)\n",
        "    fig_mts.update_layout(width= 600, height= 500)\n",
        "    return st.plotly_chart(fig_mts)\n",
        "\n",
        "def ques1():\n",
        "    brand= Aggre_user[[\"Brands\",\"Count_no\"]]\n",
        "    brand1= brand.groupby(\"Brands\")[\"Count_no\"].sum().sort_values(ascending=False)\n",
        "    brand2= pd.DataFrame(brand1).reset_index()\n",
        "\n",
        "    fig_brands= px.pie(brand2, values= \"Count_no\", names= \"Brands\", color_discrete_sequence=px.colors.sequential.dense_r,\n",
        "                       title= \"Top Mobile Brands of Transaction_count\")\n",
        "    return st.plotly_chart(fig_brands)\n",
        "\n",
        "def ques2():\n",
        "    lt= Aggre_trans[[\"States\", \"Transaction_amount\"]]\n",
        "    lt1= lt.groupby(\"States\")[\"Transaction_amount\"].sum().sort_values(ascending= True)\n",
        "    lt2= pd.DataFrame(lt1).reset_index().head(10)\n",
        "\n",
        "    fig_lts= px.bar(lt2, x= \"States\", y= \"Transaction_amount\",title= \"LOWEST TRANSACTION AMOUNT and STATES\",\n",
        "                    color_discrete_sequence= px.colors.sequential.Oranges_r)\n",
        "    return st.plotly_chart(fig_lts)\n",
        "\n",
        "def ques3():\n",
        "    htd= Map_trans[[\"Transaction_district\", \"Transaction_amount\"]]\n",
        "    htd1= htd.groupby(\"Transaction_district\")[\"Transaction_amount\"].sum().sort_values(ascending=False)\n",
        "    htd2= pd.DataFrame(htd1).head(10).reset_index()\n",
        "\n",
        "    fig_htd= px.pie(htd2, values= \"Transaction_amount\", names= \"Transaction_district\", title=\"TOP 10 DISTRICTS OF HIGHEST TRANSACTION AMOUNT\",\n",
        "                    color_discrete_sequence=px.colors.sequential.Emrld_r)\n",
        "    return st.plotly_chart(fig_htd)\n",
        "\n",
        "def ques4():\n",
        "    htd= Map_trans[[\"Transaction_district\", \"Transaction_amount\"]]\n",
        "    htd1= htd.groupby(\"Transactio_district\")[\"Transaction_amount\"].sum().sort_values(ascending=True)\n",
        "    htd2= pd.DataFrame(htd1).head(10).reset_index()\n",
        "\n",
        "    fig_htd= px.pie(htd2, values= \"Transaction_amount\", names= \"Transaction_district\", title=\"TOP 10 DISTRICTS OF LOWEST TRANSACTION AMOUNT\",\n",
        "                    color_discrete_sequence=px.colors.sequential.Greens_r)\n",
        "    return st.plotly_chart(fig_htd)\n",
        "\n",
        "def ques5():\n",
        "    sa= Map_user[[\"States\", \"Appopens\"]]\n",
        "    sa1= sa.groupby(\"States\")[\"Appopens\"].sum().sort_values(ascending=False)\n",
        "    sa2= pd.DataFrame(sa1).reset_index().head(10)\n",
        "\n",
        "    fig_sa= px.bar(sa2, x= \"States\", y= \"Appopens\", title=\"Top 10 States With AppOpens\",\n",
        "                color_discrete_sequence= px.colors.sequential.deep_r)\n",
        "    return st.plotly_chart(fig_sa)\n",
        "\n",
        "def ques6():\n",
        "    sa= Map_user[[\"States\", \"Appopens\"]]\n",
        "    sa1= sa.groupby(\"States\")[\"Appopens\"].sum().sort_values(ascending=True)\n",
        "    sa2= pd.DataFrame(sa1).reset_index().head(10)\n",
        "\n",
        "    fig_sa= px.bar(sa2, x= \"States\", y= \"Appopens\", title=\"lowest 10 States With AppOpens\",\n",
        "                color_discrete_sequence= px.colors.sequential.dense_r)\n",
        "    return st.plotly_chart(fig_sa)\n",
        "\n",
        "def ques7():\n",
        "    stc= Aggre_trans[[\"States\", \"Transaction_count\"]]\n",
        "    stc1= stc.groupby(\"States\")[\"Transaction_count\"].sum().sort_values(ascending=True)\n",
        "    stc2= pd.DataFrame(stc1).reset_index()\n",
        "\n",
        "    fig_stc= px.bar(stc2, x= \"States\", y= \"Transaction_count\", title= \"STATES WITH LOWEST TRANSACTION COUNT\",\n",
        "                    color_discrete_sequence= px.colors.sequential.Jet_r)\n",
        "    return st.plotly_chart(fig_stc)\n",
        "\n",
        "def ques8():\n",
        "    stc= Aggre_trans[[\"States\", \"Transaction_count\"]]\n",
        "    stc1= stc.groupby(\"States\")[\"Transaction_count\"].sum().sort_values(ascending=False)\n",
        "    stc2= pd.DataFrame(stc1).reset_index()\n",
        "\n",
        "    fig_stc= px.bar(stc2, x= \"States\", y= \"Transaction_count\", title= \"STATES WITH HIGHEST TRANSACTION COUNT\",\n",
        "                    color_discrete_sequence= px.colors.sequential.Magenta_r)\n",
        "    return st.plotly_chart(fig_stc)\n",
        "\n",
        "def ques9():\n",
        "    ht= Aggre_trans[[\"States\", \"Transaction_amount\"]]\n",
        "    ht1= ht.groupby(\"States\")[\"Transaction_amount\"].sum().sort_values(ascending= False)\n",
        "    ht2= pd.DataFrame(ht1).reset_index().head(10)\n",
        "\n",
        "    fig_lts= px.bar(ht2, x= \"States\", y= \"Transaction_amount\",title= \"HIGHEST TRANSACTION AMOUNT and STATES\",\n",
        "                    color_discrete_sequence= px.colors.sequential.Oranges_r)\n",
        "    return st.plotly_chart(fig_lts)\n",
        "\n",
        "def ques10():\n",
        "    dt= Map_trans[[\"Transaction_district\", \"Transaction_amount\"]]\n",
        "    dt1= dt.groupby(\"Tranasaction_district\")[\"Transaction_amount\"].sum().sort_values(ascending=True)\n",
        "    dt2= pd.DataFrame(dt1).reset_index().head(50)\n",
        "\n",
        "    fig_dt= px.bar(dt2, x= \"Transaction_district\", y= \"Transaction_amount\", title= \"DISTRICTS WITH LOWEST TRANSACTION AMOUNT\",\n",
        "                color_discrete_sequence= px.colors.sequential.Mint_r)\n",
        "    return st.plotly_chart(fig_dt)\n",
        "\n",
        "st.set_page_config(layout= \"wide\")\n",
        "\n",
        "st.title(\"PHONEPE DATA VISUALIZATION AND EXPLORATION\")\n",
        "tab1, tab2, tab3 = st.tabs([\"***HOME***\",\"***EXPLORE DATA***\",\"***TOP CHARTS***\"])\n",
        "\n",
        "with tab1:\n",
        "    col1, col2, col3 = st.columns(3)\n",
        "\n",
        "    col1.header(\"PHONEPE\")\n",
        "    col1.subheader(\"INDIA'S BEST TRANSACTION APP\")\n",
        "    col1.markdown(\"PhonePe  is an Indian digital payments and financial technology company\")\n",
        "    col1.write(\"****FEATURES****\")\n",
        "    col1.write(\"   **-> Credit & Debit card linking**\")\n",
        "    col1.write(\"   **-> Bank Balance check**\")\n",
        "    col1.write(\"   **->Money Storage**\")\n",
        "    col1.write(\"   **->PIN Authorization**\")\n",
        "    col1.download_button(\"DOWNLOAD THE APP NOW\", \"https://www.phonepe.com/app-download/\")\n",
        "\n",
        "    col2.write(\"**-> Easy Transactions**\")\n",
        "    col2.write(\"**-> One App For All Your Payments**\")\n",
        "    col2.write(\"**-> Your Bank Account Is All You Need**\")\n",
        "    col2.write(\"**-> Multiple Payment Modes**\")\n",
        "    col2.write(\"**-> PhonePe Merchants**\")\n",
        "    col2.write(\"**-> Multiple Ways To Pay**\")\n",
        "    col2.write(\"**-> 1.Direct Transfer & More**\")\n",
        "    col2.write(\"**-> 2.QR Code**\")\n",
        "    col2.write(\"**-> Earn Great Rewards**\")\n",
        "\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.markdown(\" \")\n",
        "    col3.write(\"**->No Wallet Top-Up Required**\")\n",
        "    col3.write(\"**->Pay Directly From Any Bank To Any Bank A/C**\")\n",
        "    col3.write(\"**->Instantly & Free**\")\n",
        "\n",
        "\n",
        "with tab2:\n",
        "    sel_year = st.selectbox(\"select the Year\",(\"All\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"))\n",
        "    if sel_year == \"All\" :\n",
        "        col1, col2 = st.columns(2)\n",
        "        with col1:\n",
        "            animate_all_amount()\n",
        "            payment_count()\n",
        "\n",
        "        with col2:\n",
        "            animate_all_count()\n",
        "            payment_amount()\n",
        "\n",
        "        state=st.selectbox(\"select the state\",('Andaman & Nicobar', 'Andhra Pradesh', 'Arunachal Pradesh',\n",
        "                                                'Assam', 'Bihar', 'Chandigarh', 'Chhattisgarh',\n",
        "                                                'Dadra and Nagar Haveli and Daman and Diu', 'Delhi', 'Goa',\n",
        "                                                'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu & Kashmir',\n",
        "                                                'Jharkhand', 'Karnataka', 'Kerala', 'Ladakh', 'Lakshadweep',\n",
        "                                                'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',\n",
        "                                                'Nagaland', 'Odisha', 'Puducherry', 'Punjab', 'Rajasthan',\n",
        "                                                'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh',\n",
        "                                                'Uttarakhand', 'West Bengal'))\n",
        "        reg_all_states(state)\n",
        "\n",
        "    else:\n",
        "        col1,col2= st.columns(2)\n",
        "\n",
        "        with col1:\n",
        "            transaction_amount_year(sel_year)\n",
        "            payment_count_year(sel_year)\n",
        "\n",
        "        with col2:\n",
        "            transaction_count_year(sel_year)\n",
        "            payment_amount_year(sel_year)\n",
        "            state= st.selectbox(\"select the state\",('Andaman & Nicobar', 'Andhra Pradesh', 'Arunachal Pradesh',\n",
        "                                                'Assam', 'Bihar', 'Chandigarh', 'Chhattisgarh',\n",
        "                                                'Dadra and Nagar Haveli and Daman and Diu', 'Delhi', 'Goa',\n",
        "                                                'Gujarat', 'Haryana', 'Himachal Pradesh', 'Jammu & Kashmir',\n",
        "                                                'Jharkhand', 'Karnataka', 'Kerala', 'Ladakh', 'Lakshadweep',\n",
        "                                                'Madhya Pradesh', 'Maharashtra', 'Manipur', 'Meghalaya', 'Mizoram',\n",
        "                                                'Nagaland', 'Odisha', 'Puducherry', 'Punjab', 'Rajasthan',\n",
        "                                                'Sikkim', 'Tamil Nadu', 'Telangana', 'Tripura', 'Uttar Pradesh',\n",
        "                                                'Uttarakhand', 'West Bengal'))\n",
        "            reg_state_all_RU(sel_year,state)\n",
        "            reg_state_all_TA(sel_year,state)\n",
        "\n",
        "with tab3:\n",
        "    ques= st.selectbox(\"select the question\",('Top Brands Of Mobiles Used','States With Lowest Trasaction Amount',\n",
        "                                  'Districts With Highest Transaction Amount','Top 10 Districts With Lowest Transaction Amount',\n",
        "                                  'Top 10 States With AppOpens','Least 10 States With AppOpens','States With Lowest Trasaction Count',\n",
        "                                 'States With Highest Trasaction Count','States With Highest Trasaction Amount',\n",
        "                                 'Top 50 Districts With Lowest Transaction Amount'))\n",
        "    if ques==\"Top Brands Of Mobiles Used\":\n",
        "        ques1()\n",
        "\n",
        "    elif ques==\"States With Lowest Trasaction Amount\":\n",
        "        ques2()\n",
        "\n",
        "    elif ques==\"Districts With Highest Transaction Amount\":\n",
        "        ques3()\n",
        "\n",
        "    elif ques==\"Top 10 Districts With Lowest Transaction Amount\":\n",
        "        ques4()\n",
        "\n",
        "    elif ques==\"Top 10 States With AppOpens\":\n",
        "        ques5()\n",
        "\n",
        "    elif ques==\"Least 10 States With AppOpens\":\n",
        "        ques6()\n",
        "\n",
        "    elif ques==\"States With Lowest Trasaction Count\":\n",
        "        ques7()\n",
        "\n",
        "    elif ques==\"States With Highest Trasaction Count\":\n",
        "        ques8()\n",
        "\n",
        "    elif ques==\"States With Highest Trasaction Amount\":\n",
        "        ques9()\n",
        "\n",
        "    elif ques==\"Top 50 Districts With Lowest Transaction Amount\":\n",
        "        ques10()\n"
      ]
    }
  ]
}